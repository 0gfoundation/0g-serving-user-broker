{"version":3,"file":"index.mjs","sources":["../node_modules/.pnpm/@rollup+plugin-typescript@12.1.1_rollup@3.29.5_tslib@2.7.0_typescript@5.6.2/node_modules/tslib/tslib.es6.js","../src.ts/storage/metadata.ts","../src.ts/storage/cache.ts","../src.ts/extractor/extractor.ts","../src.ts/extractor/chatbot.ts","../src.ts/broker/base.ts","../src.ts/zk/zk.ts","../src.ts/broker/account.ts","../src.ts/contract/serving/factories/Serving__factory.ts","../src.ts/contract/contract.ts","../src.ts/broker/const.ts","../src.ts/broker/request.ts","../src.ts/broker/model.ts","../src.ts/broker/verifier.ts","../src.ts/broker/response.ts","../src.ts/broker/broker.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\r\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose, inner;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n            if (async) inner = dispose;\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    var r, s = 0;\r\n    function next() {\r\n        while (r = env.stack.pop()) {\r\n            try {\r\n                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\r\n                if (r.dispose) {\r\n                    var result = r.dispose.call(r.value);\r\n                    if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n                }\r\n                else s |= 1;\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n","class Metadata {\n    private static isBrowser: boolean =\n        typeof window !== 'undefined' &&\n        typeof window.localStorage !== 'undefined'\n    private static nodeStorageFilePath: string\n    private static nodeStorage: { [key: string]: string }\n    private static initialized = false\n\n    static async initialize() {\n        if (this.initialized) {\n            return\n        }\n        console.log('TTTTTTTTTTTTTTTTTTxaaaaaaaaaaaaaaa', this.nodeStorage)\n        if (!this.isBrowser) {\n            const path = await import('path')\n            const fs = await import('fs')\n            this.nodeStorageFilePath = path.join(__dirname, 'nodeStorage.json')\n            this.nodeStorage = this.loadNodeStorage(fs.default)\n            console.log('TTTTTTTTTTTTTTTTTTbbbbbbbbbbbb', this.nodeStorage)\n        } else {\n            this.nodeStorage = {}\n        }\n        this.initialized = true\n    }\n\n    private static loadNodeStorage(fs: any): { [key: string]: string } {\n        if (fs.existsSync(this.nodeStorageFilePath)) {\n            const data = fs.readFileSync(this.nodeStorageFilePath, 'utf-8')\n            return JSON.parse(data)\n        }\n        return {}\n    }\n\n    private static saveNodeStorage() {\n        if (!this.isBrowser) {\n            console.log('!isBrowser')\n            const fs = require('fs')\n            fs.writeFileSync(\n                this.nodeStorageFilePath,\n                JSON.stringify(this.nodeStorage, null, 2),\n                'utf-8'\n            )\n        }\n    }\n\n    private static setItem(key: string, value: string) {\n        this.initialize()\n        if (this.isBrowser) {\n            localStorage.setItem(key, value)\n        } else {\n            this.nodeStorage[key] = value\n            this.saveNodeStorage()\n        }\n    }\n\n    private static getItem(key: string): string | null {\n        this.initialize()\n        if (this.isBrowser) {\n            return localStorage.getItem(key)\n        } else {\n            return this.nodeStorage[key] ?? null\n        }\n    }\n\n    static storeNonce(key: string, value: number) {\n        this.setItem(`${key}_nonce`, value.toString())\n    }\n\n    static storeOutputFee(key: string, value: number) {\n        this.setItem(`${key}_outputFee`, value.toString())\n    }\n\n    static storeZKPrivateKey(key: string, value: bigint[]) {\n        const bigIntStringArray: string[] = value.map((bi) => bi.toString())\n        const bigIntJsonString: string = JSON.stringify(bigIntStringArray)\n        this.setItem(`${key}_privateKey`, bigIntJsonString)\n    }\n\n    static storeSigningKey(key: string, value: string) {\n        this.setItem(`${key}_signingKey`, value)\n    }\n\n    static getNonce(key: string): number | null {\n        const value = this.getItem(`${key}_nonce`)\n        return value ? parseInt(value, 10) : null\n    }\n\n    static getOutputFee(key: string): number | null {\n        const value = this.getItem(`${key}_outputFee`)\n        return value ? parseInt(value, 10) : null\n    }\n\n    static getZKPrivateKey(key: string): bigint[] | null {\n        const value: string | null = this.getItem(`${key}_privateKey`)\n        if (!value) {\n            return null\n        }\n        const bigIntStringArray: string[] = JSON.parse(value)\n        return bigIntStringArray.map((str) => BigInt(str))\n    }\n\n    static getSigningKey(key: string): string | null {\n        const value = this.getItem(`${key}_signingKey`)\n        return value ?? null\n    }\n}\n\nexport { Metadata }\n","import { ServiceStructOutput } from '../contract/serving/Serving'\n\nexport enum CacheValueTypeEnum {\n    Service = 'service',\n}\n\nexport type CacheValueType = CacheValueTypeEnum.Service\n\n// TODO: Catch error\nexport class Cache {\n    static setItem(key: string, value: any, ttl: number, type: CacheValueType) {\n        const now = new Date()\n\n        const item = {\n            type,\n            value: Cache.encodeValue(value),\n            expiry: now.getTime() + ttl,\n        }\n\n        localStorage.setItem(key, JSON.stringify(item))\n    }\n\n    static getItem(key: string) {\n        const itemStr = localStorage.getItem(key)\n\n        if (!itemStr) {\n            return null\n        }\n\n        const item = JSON.parse(itemStr)\n        const now = new Date()\n\n        if (now.getTime() > item.expiry) {\n            localStorage.removeItem(key)\n            return null\n        }\n\n        return Cache.decodeValue(item.value, item.type)\n    }\n\n    static removeItem(key: string) {\n        localStorage.removeItem(key)\n    }\n\n    static encodeValue(value: any): string {\n        return JSON.stringify(value, (_, val) =>\n            typeof val === 'bigint' ? `${val.toString()}n` : val\n        )\n    }\n\n    static decodeValue(encodedValue: string, type: CacheValueType): any {\n        let ret = JSON.parse(encodedValue, (_, val) => {\n            if (typeof val === 'string' && /^\\d+n$/.test(val)) {\n                return BigInt(val.slice(0, -1))\n            }\n            return val\n        })\n\n        if (type === CacheValueTypeEnum.Service) {\n            return Cache.createServiceStructOutput(ret)\n        }\n\n        return ret\n    }\n\n    static createServiceStructOutput(\n        fields: [\n            string,\n            string,\n            string,\n            string,\n            bigint,\n            bigint,\n            bigint,\n            string,\n            string\n        ]\n    ): ServiceStructOutput {\n        const tuple: [\n            string,\n            string,\n            string,\n            string,\n            bigint,\n            bigint,\n            bigint,\n            string,\n            string\n        ] = fields\n\n        const object = {\n            provider: fields[0],\n            name: fields[1],\n            serviceType: fields[2],\n            url: fields[3],\n            inputPrice: fields[4],\n            outputPrice: fields[5],\n            updatedAt: fields[6],\n            model: fields[7],\n            verifiability: fields[8],\n        }\n\n        return Object.assign(tuple, object)\n    }\n}\n","import { ServiceStructOutput } from '../contract/serving/Serving'\n\nexport abstract class Extractor {\n    abstract getSvcInfo(): Promise<ServiceStructOutput>\n    abstract getInputCount(content: string): Promise<number>\n    abstract getOutputCount(content: string): Promise<number>\n}\n","import { ServiceStructOutput } from '../contract/serving/Serving'\nimport { Extractor } from './extractor'\n\nexport class ChatBot extends Extractor {\n    svcInfo: ServiceStructOutput\n\n    constructor(svcInfo: ServiceStructOutput) {\n        super()\n        this.svcInfo = svcInfo\n    }\n\n    getSvcInfo(): Promise<ServiceStructOutput> {\n        return Promise.resolve(this.svcInfo)\n    }\n\n    async getInputCount(content: string): Promise<number> {\n        return content.split(/\\s+/).length\n    }\n\n    async getOutputCount(content: string): Promise<number> {\n        return content.split(/\\s+/).length\n    }\n}\n","import { ServingContract } from '../contract'\nimport { Cache, CacheValueTypeEnum, Metadata } from '../storage'\nimport { ChatBot, Extractor } from '../extractor'\nimport { ServiceStructOutput } from '../contract/serving/Serving'\n\nexport abstract class ZGServingUserBrokerBase {\n    protected contract: ServingContract\n\n    constructor(contract: ServingContract) {\n        this.contract = contract\n    }\n\n    protected async getProviderData(providerAddress: string) {\n        const key = this.contract.getUserAddress() + providerAddress\n        const [nonce, outputFee, zkPrivateKey] = await Promise.all([\n            Metadata.getNonce(key),\n            Metadata.getOutputFee(key),\n            Metadata.getZKPrivateKey(key),\n        ])\n        return { nonce, outputFee, zkPrivateKey }\n    }\n\n    protected async getService(\n        providerAddress: string,\n        svcName: string,\n        useCache = true\n    ): Promise<ServiceStructOutput> {\n        const key = providerAddress + svcName\n        const cachedSvc = Cache.getItem(key)\n        if (cachedSvc && useCache) {\n            return cachedSvc\n        }\n\n        try {\n            const svc = await this.contract.getService(providerAddress, svcName)\n            Cache.setItem(key, svc, 1 * 60 * 1000, CacheValueTypeEnum.Service)\n            return svc\n        } catch (error) {\n            throw error\n        }\n    }\n\n    protected async getExtractor(\n        providerAddress: string,\n        svcName: string,\n        useCache = true\n    ): Promise<Extractor> {\n        try {\n            const svc = await this.getService(\n                providerAddress,\n                svcName,\n                useCache\n            )\n            const extractor = this.createExtractor(svc)\n            return extractor\n        } catch (error) {\n            throw error\n        }\n    }\n\n    protected createExtractor(svc: ServiceStructOutput): Extractor {\n        switch (svc.serviceType) {\n            case 'chatbot':\n                return new ChatBot(svc)\n            default:\n                throw new Error('Unknown service type')\n        }\n    }\n}\n","// import { signData, genKeyPair } from '0g-zk-settlement-client'\n\nexport interface ZKRequest {\n    fee: string\n    nonce: string\n    providerAddress: string\n    userAddress: string\n}\n\nexport async function createKey(): Promise<\n    [[bigint, bigint], [bigint, bigint]]\n> {\n    let keyPair: {\n        packPrivkey0: bigint\n        packPrivkey1: bigint\n        packedPubkey0: bigint\n        packedPubkey1: bigint\n    }\n    try {\n        keyPair = {\n            packPrivkey0: BigInt('123123'),\n            packPrivkey1: BigInt('123123'),\n            packedPubkey0: BigInt('123123'),\n            packedPubkey1: BigInt('123123'),\n        }\n        // keyPair = await genKeyPair()\n        return [\n            [keyPair.packPrivkey0, keyPair.packPrivkey1],\n            [keyPair.packedPubkey0, keyPair.packedPubkey1],\n        ]\n    } catch (error) {\n        console.error('Create ZK key error', error)\n        throw error\n    }\n}\n\nexport async function sign(\n    requests: any,\n    privateKey: bigint[]\n): Promise<string> {\n    try {\n        // signatures = await signData(requests, privateKey)\n        // const jsonString = JSON.stringify(Array.from(signatures[0]))\n        // return jsonString\n        return '123123'\n    } catch (error) {\n        throw error\n    }\n}\n","import { Metadata } from '../storage'\nimport { ZGServingUserBrokerBase } from './base'\nimport { createKey } from '../zk'\nimport { AddressLike } from 'ethers'\n\n/**\n * AccountProcessor contains methods for creating, depositing funds, and retrieving 0G Serving Accounts.\n */\nexport class AccountProcessor extends ZGServingUserBrokerBase {\n    async getAccount(user: AddressLike, provider: AddressLike) {\n        try {\n            const accounts = await this.contract.getAccount(user, provider)\n            return accounts\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async listAccount() {\n        try {\n            const accounts = await this.contract.listAccount()\n            return accounts\n        } catch (error) {\n            throw error\n        }\n    }\n\n    /**\n     * Adds a new account to the contract.\n     *\n     * This function performs the following steps:\n     * 1. Creates and stores a key pair for the given provider address.\n     * 2. Adds the account to the contract using the provider address, the generated public pair, and the specified balance.\n     *\n     * @param providerAddress - The address of the provider for whom the account is being created.\n     * @param balance - The initial balance to be assigned to the new account.\n     *\n     * @remarks\n     * When creating an account, a key pair is also created to sign the request.\n     */\n    async addAccount(providerAddress: string, balance: string) {\n        let zkSignerPublicKey: [bigint, bigint]\n        try {\n            zkSignerPublicKey = await this.createAndStoreKey(providerAddress)\n        } catch (error) {\n            throw error\n        }\n\n        try {\n            await this.contract.addAccount(\n                providerAddress,\n                zkSignerPublicKey,\n                balance\n            )\n        } catch (error) {\n            throw error\n        }\n    }\n\n    /**\n     * depositFund deposits funds into a 0G Serving account.\n     *\n     * @param providerAddress - provider address.\n     * @param balance - deposit amount.\n     */\n    async depositFund(providerAddress: string, balance: string) {\n        try {\n            await this.contract.depositFund(providerAddress, balance)\n        } catch (error) {\n            throw error\n        }\n    }\n\n    private async createAndStoreKey(\n        providerAddress: string\n    ): Promise<[bigint, bigint]> {\n        // [pri, pub]\n        let keyPair: [[bigint, bigint], [bigint, bigint]]\n        try {\n            keyPair = await createKey()\n        } catch (error) {\n            throw error\n        }\n        const key = this.contract.getUserAddress() + providerAddress\n        // private key will be used for signing request\n        Metadata.storeZKPrivateKey(key, keyPair[0])\n        // public key will be used to create serving account\n        return keyPair[1]\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport {\n  Contract,\n  ContractFactory,\n  ContractTransactionResponse,\n  Interface,\n} from \"ethers\";\nimport type { Signer, ContractDeployTransaction, ContractRunner } from \"ethers\";\nimport type { NonPayableOverrides } from \"../common.js\";\nimport type { Serving, ServingInterface } from \"../Serving.js\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"provider\",\n        type: \"address\",\n      },\n    ],\n    name: \"AccountExists\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"provider\",\n        type: \"address\",\n      },\n    ],\n    name: \"AccountNotexists\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"provider\",\n        type: \"address\",\n      },\n    ],\n    name: \"InsufficientBalance\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"reason\",\n        type: \"string\",\n      },\n    ],\n    name: \"InvalidProofInputs\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"provider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RefundInvalid\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"provider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RefundLocked\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"provider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RefundProcessed\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"provider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n    ],\n    name: \"ServiceNotexist\",\n    type: \"error\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"provider\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"pendingRefund\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"BalanceUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"provider\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RefundRequested\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"service\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n    ],\n    name: \"ServiceRemoved\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"service\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"serviceType\",\n        type: \"string\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"url\",\n        type: \"string\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"inputPrice\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"outputPrice\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"updatedAt\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"model\",\n        type: \"string\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"verifiability\",\n        type: \"string\",\n      },\n    ],\n    name: \"ServiceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"provider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[2]\",\n        name: \"signer\",\n        type: \"uint256[2]\",\n      },\n    ],\n    name: \"addAccount\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"serviceType\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"url\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"model\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"verifiability\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"inputPrice\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputPrice\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"addOrUpdateService\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"batchVerifierAddress\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"provider\",\n        type: \"address\",\n      },\n    ],\n    name: \"depositFund\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"provider\",\n        type: \"address\",\n      },\n    ],\n    name: \"getAccount\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"user\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"provider\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"balance\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"pendingRefund\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256[2]\",\n            name: \"signer\",\n            type: \"uint256[2]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"index\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"createdAt\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"bool\",\n                name: \"processed\",\n                type: \"bool\",\n              },\n            ],\n            internalType: \"struct Refund[]\",\n            name: \"refunds\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct Account\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAllAccounts\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"user\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"provider\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"balance\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"pendingRefund\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256[2]\",\n            name: \"signer\",\n            type: \"uint256[2]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"index\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"createdAt\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"bool\",\n                name: \"processed\",\n                type: \"bool\",\n              },\n            ],\n            internalType: \"struct Refund[]\",\n            name: \"refunds\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct Account[]\",\n        name: \"\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAllServices\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"provider\",\n            type: \"address\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"serviceType\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"url\",\n            type: \"string\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"inputPrice\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"outputPrice\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"updatedAt\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"string\",\n            name: \"model\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"verifiability\",\n            type: \"string\",\n          },\n        ],\n        internalType: \"struct Service[]\",\n        name: \"services\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"provider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n    ],\n    name: \"getService\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"provider\",\n            type: \"address\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"serviceType\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"url\",\n            type: \"string\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"inputPrice\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"outputPrice\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"updatedAt\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"string\",\n            name: \"model\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"verifiability\",\n            type: \"string\",\n          },\n        ],\n        internalType: \"struct Service\",\n        name: \"service\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_locktime\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_batchVerifierAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initialized\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"lockTime\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"provider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"indices\",\n        type: \"uint256[]\",\n      },\n    ],\n    name: \"processRefund\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n    ],\n    name: \"removeService\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"provider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"requestRefund\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256[]\",\n            name: \"inProof\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"proofInputs\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"numChunks\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"segmentSize\",\n            type: \"uint256[]\",\n          },\n        ],\n        internalType: \"struct VerifierInput\",\n        name: \"verifierInput\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"settleFees\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_batchVerifierAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"updateBatchVerifierAddress\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_locktime\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"updateLockTime\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613157806200007f6000396000f3fe60806040526004361061011f5760003560e01c806378c00436116100a0578063e12d4a5211610064578063e12d4a5214610333578063f2fde38b14610346578063f51acaea14610366578063fbfa4e1114610386578063fd590847146103a657600080fd5b806378c00436146102a2578063850cd14e146102c25780638da5cb5b146102d557806399652de7146102f3578063b4988fd01461031357600080fd5b8063371c22c5116100e7578063371c22c5146101f35780634da824a81461022b5780636341b2d11461024d578063715018a61461026d578063746e78d71461028257600080fd5b806308e93d0a146101245780630d6680871461014f5780630e61d15814610173578063158ef93e146101a057806321fe0f30146101d1575b600080fd5b34801561013057600080fd5b506101396103d3565b604051610146919061272f565b60405180910390f35b34801561015b57600080fd5b5061016560015481565b604051908152602001610146565b34801561017f57600080fd5b5061019361018e366004612850565b6103e4565b604051610146919061299e565b3480156101ac57600080fd5b506000546101c190600160a01b900460ff1681565b6040519015158152602001610146565b3480156101dd57600080fd5b506101e6610719565b60405161014691906129b1565b3480156101ff57600080fd5b50600254610213906001600160a01b031681565b6040516001600160a01b039091168152602001610146565b34801561023757600080fd5b5061024b610246366004612a06565b610725565b005b34801561025957600080fd5b5061024b610268366004612ad5565b6107e3565b34801561027957600080fd5b5061024b61090e565b34801561028e57600080fd5b5061024b61029d366004612bca565b610922565b3480156102ae57600080fd5b5061024b6102bd366004612be5565b610956565b61024b6102d0366004612c20565b610f73565b3480156102e157600080fd5b506000546001600160a01b0316610213565b3480156102ff57600080fd5b5061024b61030e366004612c5a565b610fc4565b34801561031f57600080fd5b5061024b61032e366004612c84565b611028565b61024b610341366004612bca565b6110dc565b34801561035257600080fd5b5061024b610361366004612bca565b61112b565b34801561037257600080fd5b5061024b610381366004612cc0565b6111a4565b34801561039257600080fd5b5061024b6103a1366004612cf5565b6111f3565b3480156103b257600080fd5b506103c66103c1366004612d0e565b611200565b6040516101469190612d41565b60606103df600461131b565b905090565b6103ec6124fb565b6103f8600784846114c9565b60408051610120810190915281546001600160a01b0316815260018201805491929160208401919061042990612d54565b80601f016020809104026020016040519081016040528092919081815260200182805461045590612d54565b80156104a25780601f10610477576101008083540402835291602001916104a2565b820191906000526020600020905b81548152906001019060200180831161048557829003601f168201915b505050505081526020016002820180546104bb90612d54565b80601f01602080910402602001604051908101604052809291908181526020018280546104e790612d54565b80156105345780601f1061050957610100808354040283529160200191610534565b820191906000526020600020905b81548152906001019060200180831161051757829003601f168201915b5050505050815260200160038201805461054d90612d54565b80601f016020809104026020016040519081016040528092919081815260200182805461057990612d54565b80156105c65780601f1061059b576101008083540402835291602001916105c6565b820191906000526020600020905b8154815290600101906020018083116105a957829003601f168201915b505050505081526020016004820154815260200160058201548152602001600682015481526020016007820180546105fd90612d54565b80601f016020809104026020016040519081016040528092919081815260200182805461062990612d54565b80156106765780601f1061064b57610100808354040283529160200191610676565b820191906000526020600020905b81548152906001019060200180831161065957829003601f168201915b5050505050815260200160088201805461068f90612d54565b80601f01602080910402602001604051908101604052809291908181526020018280546106bb90612d54565b80156107085780601f106106dd57610100808354040283529160200191610708565b820191906000526020600020905b8154815290600101906020018083116106eb57829003601f168201915b505050505081525050905092915050565b60606103df60076114de565b600080600061077133878787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060015460049594939250905061189e565b6040519295509093509150339084156108fc029085906000818181858888f193505050501580156107a6573d6000803e3d6000fd5b5060408051838152602081018390526001600160a01b038816913391600080516020613102833981519152910160405180910390a3505050505050565b610899338b8b8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8f018190048102820181019092528d815292508d91508c908190840183828082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b9081908401838280828437600092019190915250600798979695949392508b91508a9050611a60565b896040516108a79190612d8e565b6040518091039020336001600160a01b03167f95e1ef74a36b7d6ac766d338a4468c685d593739c3b7dc39e2aa5921a1e139328b8b8b8787428e8e8e8e6040516108fa9a99989796959493929190612dd3565b60405180910390a350505050505050505050565b610916611b52565b6109206000611bac565b565b61092a611b52565b600280546001600160a01b039092166001600160a01b0319928316811790915560038054909216179055565b6003546000906001600160a01b031663ad12259a6109748480612e46565b6109816020870187612e46565b87604001356040518663ffffffff1660e01b81526004016109a6959493929190612ec2565b602060405180830381865afa1580156109c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e79190612efc565b905080610a3c5760405163885e287960e01b815260206004820152601f60248201527f5a4b20736574746c656d656e742076616c69646174696f6e206661696c65640060448201526064015b60405180910390fd5b6000610a4b6020840184612e46565b808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250939450339250839150505b610a906060870187612e46565b9050811015610efd576000610aa86060880188612e46565b83818110610ab857610ab8612f1e565b90506020020135905060008185610acf9190612f4a565b9050600080878781518110610ae657610ae6612f1e565b60200260200101519050600088886002610b009190612f4a565b81518110610b1057610b10612f1e565b60200260200101519050600089896003610b2a9190612f4a565b81518110610b3a57610b3a612f1e565b602002602001015190506000610b5c84336004611bfc9092919063ffffffff16565b90508a610b6a8b6005612f4a565b81518110610b7a57610b7a612f1e565b602002602001015181600501600060028110610b9857610b98612f1e565b0154141580610be157508a610bae8b6006612f4a565b81518110610bbe57610bbe612f1e565b602002602001015181600501600160028110610bdc57610bdc612f1e565b015414155b15610c2f5760405163885e287960e01b815260206004820152601760248201527f7369676e6572206b657920697320696e636f72726563740000000000000000006044820152606401610a33565b8281600201541115610c845760405163885e287960e01b815260206004820152601a60248201527f696e697469616c206e6f6e636520697320696e636f72726563740000000000006044820152606401610a33565b895b86811015610e865760008c8281518110610ca257610ca2612f1e565b6020026020010151905060008d836001610cbc9190612f4a565b81518110610ccc57610ccc612f1e565b602002602001015190508d836003610ce49190612f4a565b81518110610cf457610cf4612f1e565b6020026020010151945060008e846004610d0e9190612f4a565b81518110610d1e57610d1e612f1e565b6020026020010151905060008a856009610d389190612f4a565b10610d44576000610d69565b8f610d50866009612f4a565b81518110610d6057610d60612f1e565b60200260200101515b90508015801590610d7a5750808710155b15610dbb5760405163885e287960e01b815260206004820152601060248201526f1b9bdb98d9481bdd995c9b185c1c195960821b6044820152606401610a33565b8884141580610dca57508d8314155b15610e6257888403610e11576040518060400160405280601d81526020017f70726f7669646572206164647265737320697320696e636f7272656374000000815250610e48565b6040518060400160405280601981526020017f75736572206164647265737320697320696e636f7272656374000000000000008152505b60405163885e287960e01b8152600401610a339190612f5d565b610e6c828b612f4a565b995050505050600781610e7f9190612f4a565b9050610c86565b508481600301541015610ed35760405163885e287960e01b8152602060048201526014602482015273696e73756666696369656e742062616c616e636560601b6044820152606401610a33565b610edd8186611c09565b6002015550919550839250610ef59150829050612f70565b915050610a83565b5082518214610f6c5760405163885e287960e01b815260206004820152603460248201527f6172726179207365676d656e7453697a652073756d206d69736d617463686573604482015273040e0eac4d8d2c640d2dce0eae840d8cadccee8d60631b6064820152608401610a33565b5050505050565b600080610f84600433868634611e12565b60408051838152602081018390529294509092506001600160a01b038616913391600080516020613102833981519152910160405180910390a350505050565b6000610fd36004338585611e7b565b905080836001600160a01b0316336001600160a01b03167f54377dfdebf06f6df53fbda737d2dcd7e141f95bbfb0c1223437e856b9de3ac34260405161101b91815260200190565b60405180910390a4505050565b600054600160a01b900460ff161561108d5760405162461bcd60e51b815260206004820152602260248201527f496e697469616c697a61626c653a20616c726561647920696e697469616c697a604482015261195960f21b6064820152608401610a33565b6000805460ff60a01b1916600160a01b1790556110a981611bac565b50600191909155600280546001600160a01b039092166001600160a01b0319928316811790915560038054909216179055565b6000806110ec6004338534611f71565b60408051838152602081018390529294509092506001600160a01b038516913391600080516020613102833981519152910160405180910390a3505050565b611133611b52565b6001600160a01b0381166111985760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a33565b6111a181611bac565b50565b6111b060073383611ffd565b806040516111be9190612d8e565b6040519081900381209033907f68026479739e3662c0651578523384b94455e79bfb701ce111a3164591ceba7390600090a350565b6111fb611b52565b600155565b611208612550565b61121460048484611bfc565b6040805160e08101825282546001600160a01b039081168252600184015416602082015260028084015482840152600384015460608301526004840154608083015282518084019384905291939260a085019291600585019182845b815481526020019060010190808311611270575050505050815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101561130a576000848152602090819020604080516080810182526004860290920180548352600180820154848601526002820154928401929092526003015460ff161515606083015290835290920191016112b1565b505050508152505090505b92915050565b6060600061132883612040565b90508067ffffffffffffffff811115611343576113436127ad565b60405190808252806020026020018201604052801561137c57816020015b611369612550565b8152602001906001900390816113615790505b50915060005b818110156114c257611394848261204b565b6040805160e08101825282546001600160a01b039081168252600184015416602082015260028084015482840152600384015460608301526004840154608083015282518084019384905291939260a085019291600585019182845b8154815260200190600101908083116113f0575050505050815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101561148a576000848152602090819020604080516080810182526004860290920180548352600180820154848601526002820154928401929092526003015460ff16151560608301529083529092019101611431565b50505050815250508382815181106114a4576114a4612f1e565b602002602001018190525080806114ba90612f70565b915050611382565b5050919050565b60006114d6848484612071565b949350505050565b606060006114eb83612040565b90508067ffffffffffffffff811115611506576115066127ad565b60405190808252806020026020018201604052801561153f57816020015b61152c6124fb565b8152602001906001900390816115245790505b50915060005b818110156114c257611557848261204b565b60408051610120810190915281546001600160a01b0316815260018201805491929160208401919061158890612d54565b80601f01602080910402602001604051908101604052809291908181526020018280546115b490612d54565b80156116015780601f106115d657610100808354040283529160200191611601565b820191906000526020600020905b8154815290600101906020018083116115e457829003601f168201915b5050505050815260200160028201805461161a90612d54565b80601f016020809104026020016040519081016040528092919081815260200182805461164690612d54565b80156116935780601f1061166857610100808354040283529160200191611693565b820191906000526020600020905b81548152906001019060200180831161167657829003601f168201915b505050505081526020016003820180546116ac90612d54565b80601f01602080910402602001604051908101604052809291908181526020018280546116d890612d54565b80156117255780601f106116fa57610100808354040283529160200191611725565b820191906000526020600020905b81548152906001019060200180831161170857829003601f168201915b5050505050815260200160048201548152602001600582015481526020016006820154815260200160078201805461175c90612d54565b80601f016020809104026020016040519081016040528092919081815260200182805461178890612d54565b80156117d55780601f106117aa576101008083540402835291602001916117d5565b820191906000526020600020905b8154815290600101906020018083116117b857829003601f168201915b505050505081526020016008820180546117ee90612d54565b80601f016020809104026020016040519081016040528092919081815260200182805461181a90612d54565b80156118675780601f1061183c57610100808354040283529160200191611867565b820191906000526020600020905b81548152906001019060200180831161184a57829003601f168201915b50505050508152505083828151811061188257611882612f1e565b60200260200101819052508061189790612f70565b9050611545565b6000806000806118af8989896120c5565b90506000935060005b8651811015611a455760008782815181106118d5576118d5612f1e565b602002602001015190508260070180549050811061192057604051637621e3f760e11b81526001600160a01b03808c1660048301528a16602482015260448101829052606401610a33565b600083600701828154811061193757611937612f1e565b60009182526020909120600490910201600381015490915060ff161561198a57604051633cf6bf4160e01b81526001600160a01b03808d1660048301528b16602482015260448101839052606401610a33565b87816002015461199a9190612f4a565b4210156119d457604051631779e03760e31b81526001600160a01b03808d1660048301528b16602482015260448101839052606401610a33565b80600101548460030160008282546119ec9190612f89565b90915550506001810154600485018054600090611a0a908490612f89565b909155505060038101805460ff19166001908117909155810154611a2e9088612f4a565b965050508080611a3d90612f70565b9150506118b8565b50806003015492508060040154915050955095509592505050565b6000611a6c898961211f565b9050611a788a82612152565b611ad657611acf8a826040518061012001604052808d6001600160a01b031681526020018c81526020018b81526020018a815260200187815260200186815260200142815260200189815260200188815250612165565b5050611b47565b6000611ae38b8b8b612071565b905060018101611af38a82612fea565b5060028101611b028982612fea565b50600481018490556005810183905560038101611b1f8882612fea565b5042600682015560078101611b348782612fea565b5060088101611b438682612fea565b5050505b505050505050505050565b6000546001600160a01b031633146109205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a33565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006114d68484846120c5565b81600401548260030154611c1d9190612f89565b811115611d8257600082600401548360030154611c3a9190612f89565b611c449083612f89565b90508083600401541015611ca95760405163885e287960e01b815260206004820152602560248201527f696e73756666696369656e742062616c616e636520696e2070656e64696e675260448201526419599d5b9960da1b6064820152608401610a33565b80836004016000828254611cbd9190612f89565b90915550506007830154600090611cd690600190612f89565b90505b60008112611d7f576000846007018281548110611cf857611cf8612f1e565b60009182526020909120600490910201600381015490915060ff1615611d1e5750611d6d565b82816001015411611d3f576001810154611d389084612f89565b9250611d5d565b82816001016000828254611d539190612f89565b9091555060009350505b82600003611d6b5750611d7f565b505b80611d77816130aa565b915050611cd9565b50505b80826003016000828254611d969190612f89565b909155505081546003830154600484015460405133936001600160a01b03169260008051602061310283398151915292611dd892918252602082015260400190565b60405180910390a3604051339082156108fc029083906000818181858888f19350505050158015611e0d573d6000803e3d6000fd5b505050565b6000806000611e21878761222b565b9050611e2d8882612152565b15611e5e57604051632cf0675960e21b81526001600160a01b03808916600483015287166024820152604401610a33565b611e6c888289898989612253565b50919660009650945050505050565b600080611e898686866120c5565b90508281600401548260030154611ea09190612f89565b1015611ed257604051630a542ddd60e31b81526001600160a01b03808716600483015285166024820152604401610a33565b6040805160808101825260078301805480835260208084018881524295850195865260006060860181815260018086018755958252928120955160049485029096019586559051938501939093559351600284015592516003909201805460ff1916921515929092179091559082018054859290611f51908490612f4a565b90915550506007810154611f6790600190612f89565b9695505050505050565b6000806000611f80868661222b565b9050611f8c8782612152565b611fbc57604051637e01ed7f60e01b81526001600160a01b03808816600483015286166024820152604401610a33565b6000611fc98888886120c5565b905084816003016000828254611fdf9190612f4a565b90915550506003810154600490910154909890975095505050505050565b6000612009838361211f565b90506120158482612152565b61203657828260405163edefcd8360e01b8152600401610a339291906130c7565b610f6c84826122be565b600061131582612349565b6000806120588484612353565b6000908152600285016020526040902091505092915050565b60008061207e848461211f565b6000818152600287016020526040902090915061209b8683612152565b6120bc57848460405163edefcd8360e01b8152600401610a339291906130c7565b95945050505050565b6000806120d2848461222b565b600081815260028701602052604090209091506120ef8683612152565b6120bc57604051637e01ed7f60e01b81526001600160a01b03808716600483015285166024820152604401610a33565b600082826040516020016121349291906130c7565b60405160208183030381529060405280519060200120905092915050565b600061215e838361235f565b9392505050565b600082815260028401602090815260408220835181546001600160a01b0319166001600160a01b039091161781559083015183919060018201906121a99082612fea565b50604082015160028201906121be9082612fea565b50606082015160038201906121d39082612fea565b506080820151600482015560a0820151600582015560c0820151600682015560e082015160078201906122069082612fea565b50610100820151600882019061221c9082612fea565b506114d6915085905084612377565b604080516001600160a01b038085166020830152831691810191909152600090606001612134565b6000858152600280880160205260409091206003810183905580546001600160a01b038088166001600160a01b031992831617835560018301805491881691909216179055906122a990600583019085906125a5565b506122b48787612377565b5050505050505050565b6000818152600283016020526040812080546001600160a01b0319168155816122ea60018301826125e3565b6122f86002830160006125e3565b6123066003830160006125e3565b60048201600090556005820160009055600682016000905560078201600061232e91906125e3565b61233c6008830160006125e3565b5061215e90508383612383565b6000611315825490565b600061215e838361238f565b6000818152600183016020526040812054151561215e565b600061215e83836123b9565b600061215e8383612408565b60008260000182815481106123a6576123a6612f1e565b9060005260206000200154905092915050565b600081815260018301602052604081205461240057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611315565b506000611315565b600081815260018301602052604081205480156124f157600061242c600183612f89565b855490915060009061244090600190612f89565b90508181146124a557600086600001828154811061246057612460612f1e565b906000526020600020015490508087600001848154811061248357612483612f1e565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806124b6576124b66130eb565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611315565b6000915050611315565b60405180610120016040528060006001600160a01b0316815260200160608152602001606081526020016060815260200160008152602001600081526020016000815260200160608152602001606081525090565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200161259861261d565b8152602001606081525090565b82600281019282156125d3579160200282015b828111156125d35782358255916020019190600101906125b8565b506125df92915061263b565b5090565b5080546125ef90612d54565b6000825580601f106125ff575050565b601f0160209004906000526020600020908101906111a1919061263b565b60405180604001604052806002906020820280368337509192915050565b5b808211156125df576000815560010161263c565b600081518084526020808501945080840160005b838110156126a25781518051885283810151848901526040808201519089015260609081015115159088015260809096019590820190600101612664565b509495945050505050565b600061010060018060a01b0380845116855260208181860151168187015260408501516040870152606085015160608701526080850151608087015260a0850151915060a0860160005b6002811015612714578351825292820192908201906001016126f7565b5050505060c08301518160e08601526120bc82860182612650565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561278457603f198886030184526127728583516126ad565b94509285019290850190600101612756565b5092979650505050505050565b80356001600160a01b03811681146127a857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126127d457600080fd5b813567ffffffffffffffff808211156127ef576127ef6127ad565b604051601f8301601f19908116603f01168101908282118183101715612817576128176127ad565b8160405283815286602085880101111561283057600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561286357600080fd5b61286c83612791565b9150602083013567ffffffffffffffff81111561288857600080fd5b612894858286016127c3565b9150509250929050565b60005b838110156128b95781810151838201526020016128a1565b50506000910152565b600081518084526128da81602086016020860161289e565b601f01601f19169290920160200192915050565b80516001600160a01b0316825260006101206020830151816020860152612917828601826128c2565b9150506040830151848203604086015261293182826128c2565b9150506060830151848203606086015261294b82826128c2565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015184820360e086015261298382826128c2565b9150506101008084015185830382870152611f6783826128c2565b60208152600061215e60208301846128ee565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561278457603f198886030184526129f48583516128ee565b945092850192908501906001016129d8565b600080600060408486031215612a1b57600080fd5b612a2484612791565b9250602084013567ffffffffffffffff80821115612a4157600080fd5b818601915086601f830112612a5557600080fd5b813581811115612a6457600080fd5b8760208260051b8501011115612a7957600080fd5b6020830194508093505050509250925092565b60008083601f840112612a9e57600080fd5b50813567ffffffffffffffff811115612ab657600080fd5b602083019150836020828501011115612ace57600080fd5b9250929050565b60008060008060008060008060008060e08b8d031215612af457600080fd5b8a3567ffffffffffffffff80821115612b0c57600080fd5b612b188e838f016127c3565b9b5060208d0135915080821115612b2e57600080fd5b612b3a8e838f016127c3565b9a5060408d0135915080821115612b5057600080fd5b612b5c8e838f01612a8c565b909a50985060608d0135915080821115612b7557600080fd5b612b818e838f01612a8c565b909850965060808d0135915080821115612b9a57600080fd5b50612ba78d828e01612a8c565b9b9e9a9d50989b979a969995989760a08101359660c09091013595509350505050565b600060208284031215612bdc57600080fd5b61215e82612791565b600060208284031215612bf757600080fd5b813567ffffffffffffffff811115612c0e57600080fd5b82016080818503121561215e57600080fd5b60008060608385031215612c3357600080fd5b612c3c83612791565b915083606084011115612c4e57600080fd5b50926020919091019150565b60008060408385031215612c6d57600080fd5b612c7683612791565b946020939093013593505050565b600080600060608486031215612c9957600080fd5b83359250612ca960208501612791565b9150612cb760408501612791565b90509250925092565b600060208284031215612cd257600080fd5b813567ffffffffffffffff811115612ce957600080fd5b6114d6848285016127c3565b600060208284031215612d0757600080fd5b5035919050565b60008060408385031215612d2157600080fd5b612d2a83612791565b9150612d3860208401612791565b90509250929050565b60208152600061215e60208301846126ad565b600181811c90821680612d6857607f821691505b602082108103612d8857634e487b7160e01b600052602260045260246000fd5b50919050565b60008251612da081846020870161289e565b9190910192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60e081526000612de660e083018d6128c2565b8281036020840152612df9818c8e612daa565b905089604084015288606084015287608084015282810360a0840152612e20818789612daa565b905082810360c0840152612e35818587612daa565b9d9c50505050505050505050505050565b6000808335601e19843603018112612e5d57600080fd5b83018035915067ffffffffffffffff821115612e7857600080fd5b6020019150600581901b3603821315612ace57600080fd5b81835260006001600160fb1b03831115612ea957600080fd5b8260051b80836020870137939093016020019392505050565b606081526000612ed6606083018789612e90565b8281036020840152612ee9818688612e90565b9150508260408301529695505050505050565b600060208284031215612f0e57600080fd5b8151801515811461215e57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561131557611315612f34565b60208152600061215e60208301846128c2565b600060018201612f8257612f82612f34565b5060010190565b8181038181111561131557611315612f34565b601f821115611e0d57600081815260208120601f850160051c81016020861015612fc35750805b601f850160051c820191505b81811015612fe257828155600101612fcf565b505050505050565b815167ffffffffffffffff811115613004576130046127ad565b613018816130128454612d54565b84612f9c565b602080601f83116001811461304d57600084156130355750858301515b600019600386901b1c1916600185901b178555612fe2565b600085815260208120601f198616915b8281101561307c5788860151825594840194600190910190840161305d565b508582101561309a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000600160ff1b82016130bf576130bf612f34565b506000190190565b6001600160a01b03831681526040602082018190526000906114d6908301846128c2565b634e487b7160e01b600052603160045260246000fdfe526824944047da5b81071fb6349412005c5da81380b336103fbe5dd34556c776a26469706673582212205173a5ae1cd26cb90b86f04d9d7dde48a76cfebed9b27c14f85698c70a6b613964736f6c63430008140033\";\n\ntype ServingConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: ServingConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class Serving__factory extends ContractFactory {\n  constructor(...args: ServingConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override getDeployTransaction(\n    overrides?: NonPayableOverrides & { from?: string }\n  ): Promise<ContractDeployTransaction> {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override deploy(overrides?: NonPayableOverrides & { from?: string }) {\n    return super.deploy(overrides || {}) as Promise<\n      Serving & {\n        deploymentTransaction(): ContractTransactionResponse;\n      }\n    >;\n  }\n  override connect(runner: ContractRunner | null): Serving__factory {\n    return super.connect(runner) as Serving__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): ServingInterface {\n    return new Interface(_abi) as ServingInterface;\n  }\n  static connect(address: string, runner?: ContractRunner | null): Serving {\n    return new Contract(address, _abi, runner) as unknown as Serving;\n  }\n}\n","import { JsonRpcSigner, BigNumberish, AddressLike, Wallet } from 'ethers'\nimport { Serving, Serving__factory } from './serving'\nimport { ServiceStructOutput } from './serving/Serving'\n\nexport class ServingContract {\n    public serving: Serving\n\n    private _userAddress: string\n\n    constructor(\n        signer: JsonRpcSigner | Wallet,\n        contractAddress: string,\n        userAddress: string\n    ) {\n        this.serving = Serving__factory.connect(contractAddress, signer)\n        this._userAddress = userAddress\n    }\n\n    lockTime(): Promise<bigint> {\n        return this.serving.lockTime()\n    }\n    \n    async listService(): Promise<ServiceStructOutput[]> {\n        try {\n            const services = await this.serving.getAllServices()\n            return services\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async listAccount() {\n        try {\n            const accounts = await this.serving.getAllAccounts()\n            return accounts\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async getAccount(user: AddressLike, provider: AddressLike) {\n        try {\n            const account = await this.serving.getAccount(user, provider)\n            return account\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async addOrUpdateService(\n        name: string,\n        serviceType: string,\n        url: string,\n        model: string,\n        verifiability: string,\n        inputPrice: BigNumberish,\n        outputPrice: BigNumberish\n    ) {\n        try {\n            const tx = await this.serving.addOrUpdateService(\n                name,\n                serviceType,\n                url,\n                model,\n                verifiability,\n                inputPrice,\n                outputPrice\n            )\n\n            const receipt = await tx.wait()\n\n            if (!receipt || receipt.status !== 1) {\n                const error = new Error('Transaction failed')\n                throw error\n            }\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async addAccount(\n        providerAddress: AddressLike,\n        signer: [BigNumberish, BigNumberish],\n        balance: string\n    ) {\n        try {\n            const tx = await this.serving.addAccount(providerAddress, signer, {\n                value: BigInt(balance),\n            })\n\n            const receipt = await tx.wait()\n\n            if (!receipt || receipt.status !== 1) {\n                const error = new Error('Transaction failed')\n                throw error\n            }\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async depositFund(providerAddress: AddressLike, balance: string) {\n        try {\n            const tx = await this.serving.depositFund(providerAddress, {\n                value: balance,\n            })\n\n            const receipt = await tx.wait()\n\n            if (!receipt || receipt.status !== 1) {\n                const error = new Error('Transaction failed')\n                throw error\n            }\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async getService(\n        providerAddress: string,\n        svcName: string\n    ): Promise<ServiceStructOutput> {\n        try {\n            return this.serving.getService(providerAddress, svcName)\n        } catch (error) {\n            throw error\n        }\n    }\n\n    getUserAddress(): string {\n        return this._userAddress\n    }\n}\n","export const REQUEST_LENGTH = 40\n","import { Extractor } from '../extractor'\nimport { Metadata } from '../storage'\nimport { sign } from '../zk'\n// import { Request } from '0g-zk-settlement-client'\nimport { REQUEST_LENGTH } from './const'\nimport { ZGServingUserBrokerBase } from './base'\n\n/**\n * ServingRequestHeaders contains headers related to request billing.\n * These need to be added to the request.\n */\nexport interface ServingRequestHeaders {\n    'X-Phala-Signature-Type': 'StandaloneApi'\n    /**\n     * User's address\n     */\n    Address: string\n    /**\n     * Total fee for the request.\n     * Equals 'Input-Fee' + 'Previous-Output-Fee'\n     */\n    Fee: string\n    /**\n     * Fee required for the input of this request.\n     * For example, for a chatbot service,\n     * 'Input-Fee' = number of tokens input by the user * price per token\n     */\n    'Input-Fee': string\n    Nonce: string\n    /**\n     * Fee returned from the previous request.\n     * In the 0G Serving system, the request is the only payment proof,\n     * so the fee returned from the previous request will be included in the current request.\n     * For example, for a chatbot service,\n     * 'Previous-Output-Fee' = number of tokens returned by the service in the previous round * price per token\n     */\n    'Previous-Output-Fee': string\n    /**\n     * Service name\n     */\n    'Service-Name': string\n    /**\n     * User's signature for the other headers.\n     * By adding this information, the user gives the current request the characteristics of a settlement proof.\n     */\n    Signature: string\n}\n\n/**\n * RequestProcessor is a subclass of ZGServingUserBroker.\n * It needs to be initialized with createZGServingUserBroker\n * before use.\n */\nexport class RequestProcessor extends ZGServingUserBrokerBase {\n    async processRequest(\n        providerAddress: string,\n        svcName: string,\n        content: string\n    ): Promise<ServingRequestHeaders> {\n        let extractor: Extractor\n        let sig: string\n\n        try {\n            extractor = await this.getExtractor(providerAddress, svcName)\n\n            const { nonce, outputFee, zkPrivateKey } =\n                await this.getProviderData(providerAddress)\n\n            if (!zkPrivateKey) {\n                throw new Error('Miss private key for signing request')\n            }\n\n            const updatedNonce = !nonce ? 1 : nonce + REQUEST_LENGTH\n            const key = this.contract.getUserAddress() + providerAddress\n            Metadata.storeNonce(key, updatedNonce)\n\n            const { fee, inputFee } = await this.calculateFees(\n                extractor,\n                content,\n                outputFee\n            )\n\n            // const zkInput = new Request(\n            //     updatedNonce.toString(),\n            //     fee.toString(),\n            //     this.contract.getUserAddress(),\n            //     providerAddress\n            // )\n\n            const zkInput = {\n                nonce: updatedNonce,\n                fee: fee,\n                userAddress: this.contract.getUserAddress(),\n                providerAddress: providerAddress,\n            }\n\n            sig = await sign([zkInput], zkPrivateKey)\n\n            return {\n                'X-Phala-Signature-Type': 'StandaloneApi',\n                Address: this.contract.getUserAddress(),\n                Fee: zkInput.fee.toString(),\n                'Input-Fee': inputFee.toString(),\n                Nonce: zkInput.nonce.toString(),\n                'Previous-Output-Fee': (outputFee ?? 0).toString(),\n                'Service-Name': svcName,\n                Signature: sig,\n            }\n        } catch (error) {\n            throw error\n        }\n    }\n\n    private async calculateFees(\n        extractor: Extractor,\n        content: string,\n        outputFee: number | null\n    ) {\n        const svc = await extractor.getSvcInfo()\n        const inputCount = await extractor.getInputCount(content)\n        const inputFee = inputCount * Number(svc.inputPrice)\n        const fee = inputFee + (outputFee ?? 0)\n        return { fee, inputFee }\n    }\n}\n","import { ServiceStructOutput } from '../contract'\nimport { ZGServingUserBrokerBase } from './base'\n\nexport enum VerifiabilityEnum {\n    OpML = 'OpML',\n    TeeML = 'TeeML',\n    ZKML = 'ZKML',\n}\n\nexport type Verifiability =\n    | VerifiabilityEnum.OpML\n    | VerifiabilityEnum.TeeML\n    | VerifiabilityEnum.ZKML\n\nexport class ModelProcessor extends ZGServingUserBrokerBase {\n    async listService(): Promise<ServiceStructOutput[]> {\n        try {\n            const services = await this.contract.listService()\n            return services\n        } catch (error) {\n            throw error\n        }\n    }\n}\n\nexport function isVerifiability(value: string): value is Verifiability {\n    return Object.values(VerifiabilityEnum).includes(value as VerifiabilityEnum)\n}\n","import { Metadata } from '../storage'\nimport { ZGServingUserBrokerBase } from './base'\nimport { ethers } from 'ethers'\n\nexport interface ResponseSignature {\n    text: string\n    signature: string\n}\n\nexport interface SignerRA {\n    signing_address: string\n    nvidia_payload: string\n    intel_quote: string\n}\n\nexport interface SingerRAVerificationResult {\n    /**\n     * Whether the signer RA is valid\n     * null means the RA has not been verified\n     */\n    valid: boolean | null\n    /**\n     * The signing address of the signer\n     */\n    signingAddress: string\n}\n\n/**\n * The Verifier class contains methods for verifying service reliability.\n */\nexport class Verifier extends ZGServingUserBrokerBase {\n    async verifyService(\n        providerAddress: string,\n        svcName: string\n    ): Promise<boolean | null> {\n        try {\n            const { valid } = await this.getSigningAddress(\n                providerAddress,\n                svcName,\n                true\n            )\n            return valid\n        } catch (error) {\n            throw error\n        }\n    }\n\n    /**\n     * getSigningAddress verifies whether the signing address\n     * of the signer corresponds to a valid RA.\n     *\n     * It also stores the signing address of the RA in\n     * localStorage and returns it.\n     *\n     * @param providerAddress - provider address.\n     * @param svcName - service name.\n     * @param verifyRA - whether to verify the RA， default is false.\n     * @returns The first return value indicates whether the RA is valid,\n     * and the second return value indicates the signing address of the RA.\n     */\n    async getSigningAddress(\n        providerAddress: string,\n        svcName: string,\n        verifyRA = false\n    ): Promise<SingerRAVerificationResult> {\n        const key = this.contract.getUserAddress() + providerAddress + svcName\n        let signingKey = Metadata.getSigningKey(key)\n        if (!verifyRA && signingKey) {\n            return {\n                valid: null,\n                signingAddress: signingKey,\n            }\n        }\n\n        try {\n            const extractor = await this.getExtractor(\n                providerAddress,\n                svcName,\n                false\n            )\n            const svc = await extractor.getSvcInfo()\n\n            const signerRA = await Verifier.fetSignerRA(svc.url, svc.name)\n            if (!signerRA?.signing_address) {\n                throw new Error('signing address does not exist')\n            }\n\n            signingKey =\n                this.contract.getUserAddress() + providerAddress + svcName\n            Metadata.storeSigningKey(signingKey, signerRA.signing_address)\n\n            // TODO: use intel_quote to verify signing address\n            const valid = await Verifier.verifyRA(signerRA.nvidia_payload)\n\n            return {\n                valid,\n                signingAddress: signerRA.signing_address,\n            }\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async getSignerRaDownloadLink(\n        providerAddress: string,\n        svcName: string\n    ): Promise<string> {\n        try {\n            const svc = await this.getService(providerAddress, svcName)\n            return `${svc.url}/v1/proxy/${svcName}/attestation/report`\n        } catch (error) {\n            if (error instanceof Error) {\n                console.error(error?.message)\n            }\n            throw error\n        }\n    }\n\n    async getChatSignatureDownloadLink(\n        providerAddress: string,\n        svcName: string,\n        chatID: string\n    ): Promise<string> {\n        try {\n            const svc = await this.getService(providerAddress, svcName)\n            return `${svc.url}/v1/proxy/${svcName}/signature/${chatID}`\n        } catch (error) {\n            throw error\n        }\n    }\n\n    // TODO: add test\n    static async verifyRA(nvidia_payload: any): Promise<boolean> {\n        return fetch('https://nras.attestation.nvidia.com/v3/attest/gpu', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json',\n            },\n            body: JSON.stringify(nvidia_payload),\n        })\n            .then((response) => {\n                if (response.status === 200) {\n                    return true\n                }\n                if (response.status === 404) {\n                    throw new Error('verify RA error: 404')\n                } else {\n                    return false\n                }\n            })\n            .catch((error) => {\n                if (error instanceof Error) {\n                    console.error(error.message)\n                }\n                return false\n            })\n    }\n\n    static async fetSignerRA(\n        providerBrokerURL: string,\n        svcName: string\n    ): Promise<SignerRA> {\n        return fetch(\n            `${providerBrokerURL}/v1/proxy/${svcName}/attestation/report`,\n            {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            }\n        )\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error('Network response was not ok')\n                }\n                return response.json()\n            })\n            .then((data) => {\n                if (data.nvidia_payload) {\n                    try {\n                        data.nvidia_payload = JSON.parse(data.nvidia_payload)\n                    } catch (error) {\n                        throw error\n                    }\n                }\n                if (data.intel_quote) {\n                    try {\n                        const intel_quota = JSON.parse(data.intel_quote)\n                        data.intel_quote =\n                            '0x' +\n                            Buffer.from(intel_quota, 'base64').toString('hex')\n                    } catch (error) {\n                        throw error\n                    }\n                }\n\n                return data as SignerRA\n            })\n            .catch((error) => {\n                throw error\n            })\n    }\n\n    static async fetSignatureByChatID(\n        providerBrokerURL: string,\n        svcName: string,\n        chatID: string\n    ): Promise<ResponseSignature> {\n        return fetch(\n            `${providerBrokerURL}/v1/proxy/${svcName}/signature/${chatID}`,\n            {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            }\n        )\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error('getting signature error')\n                }\n                return response.json()\n            })\n            .then((data) => {\n                return data as ResponseSignature\n            })\n            .catch((error) => {\n                throw error\n            })\n    }\n\n    static verifySignature(\n        message: string,\n        signature: string,\n        expectedAddress: string\n    ): boolean {\n        const messageHash = ethers.hashMessage(message)\n\n        const recoveredAddress = ethers.recoverAddress(messageHash, signature)\n\n        return recoveredAddress.toLowerCase() === expectedAddress.toLowerCase()\n    }\n}\n","import { ServingContract } from '../contract'\nimport { Extractor } from '../extractor'\nimport { Metadata } from '../storage'\nimport { ZGServingUserBrokerBase } from './base'\nimport { isVerifiability, VerifiabilityEnum } from './model'\nimport { Verifier } from './verifier'\n\n/**\n * ResponseProcessor is a subclass of ZGServingUserBroker.\n * It needs to be initialized with createZGServingUserBroker\n * before use.\n */\nexport class ResponseProcessor extends ZGServingUserBrokerBase {\n    private verifier: Verifier\n\n    constructor(contract: ServingContract) {\n        super(contract)\n        this.contract = contract\n        this.verifier = new Verifier(contract)\n    }\n\n    async processResponse(\n        providerAddress: string,\n        svcName: string,\n        content: string,\n        chatID?: string\n    ): Promise<boolean | null> {\n        try {\n            let extractor: Extractor\n            extractor = await this.getExtractor(providerAddress, svcName)\n            const outputFee = await this.calculateOutputFees(extractor, content)\n            Metadata.storeOutputFee(\n                this.contract.getUserAddress() + providerAddress,\n                outputFee\n            )\n\n            const svc = await extractor.getSvcInfo()\n\n            // TODO: Temporarily return true for non-TeeML verifiability.\n            // these cases will be handled in the future.\n            if (\n                isVerifiability(svc.verifiability) ||\n                svc.verifiability !== VerifiabilityEnum.TeeML\n            ) {\n                return true\n            }\n\n            if (!chatID) {\n                throw new Error('Chat ID does not exist')\n            }\n\n            let singerRAVerificationResult =\n                await this.verifier.getSigningAddress(providerAddress, svcName)\n\n            if (!singerRAVerificationResult.valid) {\n                singerRAVerificationResult =\n                    await this.verifier.getSigningAddress(\n                        providerAddress,\n                        svcName,\n                        true\n                    )\n            }\n\n            if (!singerRAVerificationResult.valid) {\n                throw new Error('Signing address is invalid')\n            }\n\n            const ResponseSignature = await Verifier.fetSignatureByChatID(\n                svc.url,\n                svcName,\n                chatID\n            )\n\n            return Verifier.verifySignature(\n                ResponseSignature.text,\n                `0x${ResponseSignature.signature}`,\n                singerRAVerificationResult.signingAddress\n            )\n        } catch (error) {\n            throw error\n        }\n    }\n\n    private async calculateOutputFees(\n        extractor: Extractor,\n        content: string\n    ): Promise<number> {\n        const svc = await extractor.getSvcInfo()\n        const outputCount = await extractor.getOutputCount(content)\n        return outputCount * Number(svc.outputPrice)\n    }\n}\n","import { ServingContract } from '../contract'\nimport { JsonRpcSigner, Wallet } from 'ethers'\nimport { RequestProcessor } from './request'\nimport { ResponseProcessor } from './response'\nimport { Verifier } from './verifier'\nimport { AccountProcessor } from './account'\nimport { ModelProcessor } from './model'\n\nexport class ZGServingNetworkBroker {\n    public requestProcessor!: RequestProcessor\n    public responseProcessor!: ResponseProcessor\n    public verifier!: Verifier\n    public accountProcessor!: AccountProcessor\n    public modelProcessor!: ModelProcessor\n\n    private signer: JsonRpcSigner | Wallet\n    private contractAddress: string\n\n    constructor(signer: JsonRpcSigner | Wallet, contractAddress: string) {\n        this.signer = signer\n        this.contractAddress = contractAddress\n    }\n\n    async initialize() {\n        let userAddress: string\n        try {\n            userAddress = await this.signer.getAddress()\n        } catch (error) {\n            throw error\n        }\n        const contract = new ServingContract(\n            this.signer,\n            this.contractAddress,\n            userAddress\n        )\n        this.requestProcessor = new RequestProcessor(contract)\n        this.responseProcessor = new ResponseProcessor(contract)\n        this.accountProcessor = new AccountProcessor(contract)\n        this.modelProcessor = new ModelProcessor(contract)\n        this.verifier = new Verifier(contract)\n    }\n\n    /**\n     * Retrieves a list of services from the contract.\n     *\n     * @returns {Promise<ServiceStructOutput[]>} A promise that resolves to an array of ServiceStructOutput objects.\n     * @throws An error if the service list cannot be retrieved.\n     */\n    public listService = async () => {\n        try {\n            return await this.modelProcessor.listService()\n        } catch (error) {\n            throw error\n        }\n    }\n\n    /**\n     * Adds a new account to the contract.\n     *\n     * This function performs the following steps:\n     * 1. Creates and stores a key pair for the given provider address.\n     * 2. Adds the account to the contract using the provider address, the generated public pair, and the specified balance.\n     *\n     * @param providerAddress - The address of the provider for whom the account is being created.\n     * @param balance - The initial balance to be assigned to the new account.\n     *\n     * @throws  An error if the account creation fails.\n     *\n     * @remarks\n     * When creating an account, a key pair is also created to sign the request.\n     */\n    public addAccount = async (account: string, balance: string) => {\n        try {\n            return await this.accountProcessor.addAccount(account, balance)\n        } catch (error) {\n            throw error\n        }\n    }\n\n    /**\n     * Deposits a specified amount of funds into the given account.\n     *\n     * @param {string} account - The account identifier where the funds will be deposited.\n     * @param {string} amount - The amount of funds to be deposited.\n     * @throws  An error if the deposit fails.\n     */\n    public depositFund = async (account: string, amount: string) => {\n        try {\n            return await this.accountProcessor.depositFund(account, amount)\n        } catch (error) {\n            throw error\n        }\n    }\n\n    /**\n     * processRequest generates billing-related headers for the request\n     * when the user uses the provider service.\n     *\n     * In the 0G Serving system, a request with valid billing headers\n     * is considered a settlement proof and will be used by the provider\n     * for contract settlement.\n     *\n     * @param providerAddress - The address of the provider.\n     * @param svcName - The name of the service.\n     * @param content - The content being billed. For example, in a chatbot service, it is the text input by the user.\n     * @returns headers. Records information such as the request fee and user signature.\n     * @throws An error if errors occur during the processing of the request.\n     */\n    public processRequest = async (\n        providerAddress: string,\n        svcName: string,\n        content: string\n    ) => {\n        try {\n            return await this.requestProcessor.processRequest(\n                providerAddress,\n                svcName,\n                content\n            )\n        } catch (error) {\n            throw error\n        }\n    }\n\n    /**\n     * processResponse is used after the user successfully obtains a response from the provider service.\n     *\n     * processResponse extracts necessary information from the response and records it\n     * in localStorage for generating billing headers for subsequent requests.\n     *\n     * Additionally, if the service is verifiable, input the chat ID from the response and\n     * processResponse will determine the validity of the returned content by checking the\n     * provider service's response and corresponding signature corresponding to the chat ID.\n     *\n     * @param providerAddress - The address of the provider.\n     * @param svcName - The name of the service.\n     * @param content - The main content returned by the service. For example, in the case of a chatbot service,\n     * it would be the response text.\n     * @param chatID - Only for verifiable service. You can fill in the chat ID obtained from response to\n     * automatically download the response signature. The function will verify the reliability of the response\n     * using the service's signing address.\n     * @returns A boolean value. True indicates the returned content is valid, otherwise it is invalid.\n     * @throws An error if errors occur during the processing of the response.\n     */\n    public processResponse = async (\n        providerAddress: string,\n        svcName: string,\n        content: string,\n        chatID?: string\n    ): Promise<boolean | null> => {\n        try {\n            return await this.responseProcessor.processResponse(\n                providerAddress,\n                svcName,\n                content,\n                chatID\n            )\n        } catch (error) {\n            throw error\n        }\n    }\n\n    /**\n     * verifyService is used to verify the reliability of the service.\n     *\n     * @param providerAddress - The address of the provider.\n     * @param svcName - The name of the service.\n     * @returns A <boolean | null> value. True indicates the service is reliable, otherwise it is unreliable.\n     * @throws An error if errors occur during the verification process.\n     */\n    public verifyService = async (\n        providerAddress: string,\n        svcName: string\n    ): Promise<boolean | null> => {\n        try {\n            return await this.verifier.verifyService(providerAddress, svcName)\n        } catch (error) {\n            throw error\n        }\n    }\n\n    /**\n     * getSignerRaDownloadLink returns the download link for the Signer RA.\n     *\n     * It can be provided to users who wish to manually verify the Signer RA.\n     *\n     * @param providerAddress - provider address.\n     * @param svcName - service name.\n     * @returns Download link.\n     */\n    public getSignerRaDownloadLink = async (\n        providerAddress: string,\n        svcName: string\n    ) => {\n        try {\n            return await this.verifier.getSignerRaDownloadLink(\n                providerAddress,\n                svcName\n            )\n        } catch (error) {\n            throw error\n        }\n    }\n\n    /**\n     * getChatSignatureDownloadLink returns the download link for the signature of a single chat.\n     *\n     * It can be provided to users who wish to manually verify the content of a single chat.\n     *\n     * @param providerAddress - provider address.\n     * @param svcName - service name.\n     * @param chatID - ID of the chat.\n     *\n     * @description To verify the chat signature, use the following code:\n     *\n     * ```typescript\n     * const messageHash = ethers.hashMessage(messageToBeVerified)\n     * const recoveredAddress = ethers.recoverAddress(messageHash, signature)\n     * const isValid = recoveredAddress.toLowerCase() === signingAddress.toLowerCase()\n     * ```\n     *\n     * @returns Download link.\n     */\n    public getChatSignatureDownloadLink = async (\n        providerAddress: string,\n        svcName: string,\n        chatID: string\n    ) => {\n        try {\n            return await this.verifier.getChatSignatureDownloadLink(\n                providerAddress,\n                svcName,\n                chatID\n            )\n        } catch (error) {\n            throw error\n        }\n    }\n}\n\n/**\n * createZGServingNetworkBroker is used to initialize ZGServingUserBroker\n *\n * @param signer - Signer from ethers.js.\n * @param contractAddress - 0G Serving contract address, use default address if not provided.\n * @returns broker instance.\n * @throws An error if the broker cannot be initialized.\n */\nexport async function createZGServingNetworkBroker(\n    signer: JsonRpcSigner | Wallet,\n    contractAddress = '0x9Ae9b2C822beFF4B4466075006bc6b5ac35E779F'\n): Promise<ZGServingNetworkBroker> {\n    const broker = new ZGServingNetworkBroker(signer, contractAddress)\n    try {\n        await broker.initialize()\n        return broker\n    } catch (error) {\n        throw error\n    }\n}\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}