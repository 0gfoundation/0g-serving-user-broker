/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common.js";
import type {
  LedgerManager,
  LedgerManagerInterface,
} from "../LedgerManager.js";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "LedgerExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "LedgerNotExists",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "signer",
        type: "uint256[2]",
      },
      {
        internalType: "string",
        name: "additionalInfo",
        type: "string",
      },
    ],
    name: "addLedger",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "depositFund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "fineTuneAddress",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllLedgers",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "availableBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalBalance",
            type: "uint256",
          },
          {
            internalType: "uint256[2]",
            name: "signer",
            type: "uint256[2]",
          },
          {
            internalType: "string",
            name: "additionalInfo",
            type: "string",
          },
        ],
        internalType: "struct Ledger[]",
        name: "accounts",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getLedger",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "availableBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalBalance",
            type: "uint256",
          },
          {
            internalType: "uint256[2]",
            name: "signer",
            type: "uint256[2]",
          },
          {
            internalType: "string",
            name: "additionalInfo",
            type: "string",
          },
        ],
        internalType: "struct Ledger",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "inferenceAddress",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_inferenceAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_fineTuneAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "refund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "providers",
        type: "address[]",
      },
      {
        internalType: "string",
        name: "serviceType",
        type: "string",
      },
    ],
    name: "retrieveFund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "string",
        name: "serviceType",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6118288061007e6000396000f3fe6080604052600436106100dd5760003560e01c806372adc0d91161007f578063c0c53b8b11610059578063c0c53b8b14610237578063e5d9fdab14610257578063f2fde38b14610277578063f7cd6af91461029757600080fd5b806372adc0d9146101e95780638d0d8cb6146102115780638da5cb5b1461021957600080fd5b80632ba43b82116100bb5780632ba43b821461015c57806331404a191461017c57806352c00eb71461019c578063715018a6146101d457600080fd5b8063158ef93e146100e25780631665c79b14610118578063278ecde11461013a575b600080fd5b3480156100ee57600080fd5b5060005461010390600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b34801561012457600080fd5b5061012d6102c4565b60405161010f91906111d2565b34801561014657600080fd5b5061015a610155366004611234565b610463565b005b34801561016857600080fd5b5061015a610177366004611320565b6104e7565b34801561018857600080fd5b5061015a610197366004611377565b610611565b3480156101a857600080fd5b506002546101bc906001600160a01b031681565b6040516001600160a01b03909116815260200161010f565b3480156101e057600080fd5b5061015a6106d2565b6101fc6101f7366004611446565b6106e6565b6040805192835260208301919091520161010f565b61015a610739565b34801561022557600080fd5b506000546001600160a01b03166101bc565b34801561024357600080fd5b5061015a61025236600461148f565b610798565b34801561026357600080fd5b506001546101bc906001600160a01b031681565b34801561028357600080fd5b5061015a6102923660046114d2565b610862565b3480156102a357600080fd5b506102b76102b23660046114d2565b6108db565b60405161010f91906114ed565b606060006102d06109e6565b90508067ffffffffffffffff8111156102eb576102eb611269565b60405190808252806020026020018201604052801561032457816020015b610311611076565b8152602001906001900390816103095790505b50915060005b8181101561045e5761033b816109f7565b6040805160a08101825282546001600160a01b031681526001830154602082015260028084015482840152825180840193849052919392606085019291600385019182845b81548152602001906001019080831161038057505050505081526020016005820180546103ac90611500565b80601f01602080910402602001604051908101604052809291908181526020018280546103d890611500565b80156104255780601f106103fa57610100808354040283529160200191610425565b820191906000526020600020905b81548152906001019060200180831161040857829003601f168201915b5050505050815250508382815181106104405761044061153a565b6020026020010181905250808061045690611566565b91505061032a565b505090565b600061046e33610a1a565b9050818160010154101561049c5760405163112fed8b60e31b81523360048201526024015b60405180910390fd5b818160010160008282546104b0919061157f565b9091555050604051339083156108fc029084906000818181858888f193505050501580156104e2573d6000803e3d6000fd5b505050565b60006104f233610a1a565b9050818160010154101561051b5760405163112fed8b60e31b8152336004820152602401610493565b60008360405160200161052e9190611592565b6040516020818303038152906040528051906020012090507f2a52b6261f3850b89541ab4444869004fe552e50532808641800076f8e9ec465810361058b576007546105869083906001600160a01b03168786610a6f565b61060a565b7f796fa12d30f6046c8d663bd4985181623031a418457cd73ac9146b182c5f8c8c81036105cb576006546105869083906001600160a01b03168786610a6f565b60405162461bcd60e51b8152602060048201526014602482015273496e76616c69642073657276696365207479706560601b6044820152606401610493565b5050505050565b600061061c33610a1a565b90506000826040516020016106319190611592565b6040516020818303038152906040528051906020012090507f2a52b6261f3850b89541ab4444869004fe552e50532808641800076f8e9ec465810361068d576007546106889083906001600160a01b031686610d34565b6106cc565b7f796fa12d30f6046c8d663bd4985181623031a418457cd73ac9146b182c5f8c8c81036105cb576006546106889083906001600160a01b031686610d34565b50505050565b6106da610e71565b6106e46000610ecb565b565b60008060006106f433610f1b565b90506106ff81610f4f565b1561071f5760405163cde58aa160e01b8152336004820152602401610493565b61072c8133873488610f62565b5034946000945092505050565b600061074433610f1b565b905061074f81610f4f565b61076e57604051637d2d536b60e01b8152336004820152602401610493565b600061077933610a1a565b90503481600101600082825461078f91906115ae565b90915550505050565b600054600160a01b900460ff16156107fd5760405162461bcd60e51b815260206004820152602260248201527f496e697469616c697a61626c653a20616c726561647920696e697469616c697a604482015261195960f21b6064820152608401610493565b6000805460ff60a01b1916600160a01b17905561081981610ecb565b50600180546001600160a01b039384166001600160a01b031991821681179092556002805493909416928116831790935560068054841690921790915560078054909216179055565b61086a610e71565b6001600160a01b0381166108cf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610493565b6108d881610ecb565b50565b6108e3611076565b6108ec82610a1a565b6040805160a08101825282546001600160a01b031681526001830154602082015260028084015482840152825180840193849052919392606085019291600385019182845b815481526020019060010190808311610931575050505050815260200160058201805461095d90611500565b80601f016020809104026020016040519081016040528092919081815260200182805461098990611500565b80156109d65780601f106109ab576101008083540402835291602001916109d6565b820191906000526020600020905b8154815290600101906020018083116109b957829003601f168201915b5050505050815250509050919050565b60006109f26003610fc3565b905090565b600080610a05600384610fcd565b60009081526005602052604090209392505050565b600080610a2683610f1b565b6000818152600560205260409020909150610a4082610f4f565b610a6857604051637d2d536b60e01b81526001600160a01b0385166004820152602401610493565b9392505050565b80846001016000828254610a83919061157f565b909155505060405163147500e360e01b81523360048201526001600160a01b03838116602483015284169063147500e390604401602060405180830381865afa158015610ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af891906115c1565b15610c17576001546040513360248201526001600160a01b0384811660448301526000921690839060640160408051601f198184030181529181526020820180516001600160e01b031663569a423960e11b17905251610b589190611592565b60006040518083038185875af1925050503d8060008114610b95576040519150601f19603f3d011682016040523d82523d6000602084013e610b9a565b606091505b5050905080610c115760405162461bcd60e51b815260206004820152603e60248201527f5472616e7366657220616e64206465706f73697446756e6442794c656467657260448201527f2063616c6c20746f206368696c6420636f6e7472616374206661696c656400006064820152608401610493565b506106cc565b6001546040516000916001600160a01b0316908390610c46903390879060038b019060058c01906024016115e3565b60408051601f198184030181529181526020820180516001600160e01b03166303802f4f60e11b17905251610c7b9190611592565b60006040518083038185875af1925050503d8060008114610cb8576040519150601f19603f3d011682016040523d82523d6000602084013e610cbd565b606091505b505090508061060a5760405162461bcd60e51b815260206004820152603d60248201527f5472616e7366657220616e64206164644163636f756e7442794c65646765722060448201527f63616c6c20746f206368696c6420636f6e7472616374206661696c65640000006064820152608401610493565b6000805b8251811015610e51576000838281518110610d5557610d5561153a565b602090810291909101015160405163271e279160e11b81523360048201526001600160a01b03808316602483015291925090861690634e3c4f22906044016060604051808303816000875af1158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd691906116b6565b5050604051636c79158d60e01b81523360048201526001600160a01b03838116602483015291945090861690636c79158d90604401600060405180830381600087803b158015610e2557600080fd5b505af1158015610e39573d6000803e3d6000fd5b50505050508080610e4990611566565b915050610d38565b5080846001016000828254610e6691906115ae565b909155505050505050565b6000546001600160a01b031633146106e45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610493565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b038316602082015260009101604051602081830303815290604052805190602001209050919050565b6000610f5c600383610fd9565b92915050565b60008581526005602052604090206001810183905580546001600160a01b0319166001600160a01b038616178155610f9f600382018560026110b4565b5060058101610fae8382611732565b50610fba600387610ff1565b50505050505050565b6000610f5c825490565b6000610a688383610ffd565b60008181526001830160205260408120541515610a68565b6000610a688383611027565b60008260000182815481106110145761101461153a565b9060005260206000200154905092915050565b600081815260018301602052604081205461106e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610f5c565b506000610f5c565b6040518060a0016040528060006001600160a01b0316815260200160008152602001600081526020016110a76110f2565b8152602001606081525090565b82600281019282156110e2579160200282015b828111156110e25782358255916020019190600101906110c7565b506110ee929150611110565b5090565b60405180604001604052806002906020820280368337509192915050565b5b808211156110ee5760008155600101611111565b60005b83811015611140578181015183820152602001611128565b50506000910152565b80516001600160a01b031682526020808201518184015260408083015190840152606080830151600092918501835b600281101561119557825182529183019190830190600101611178565b505050608083015160c060a086015280518060c08701526111bc8160e08801858501611125565b601f01601f19169490940160e001949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561122757603f19888603018452611215858351611149565b945092850192908501906001016111f9565b5092979650505050505050565b60006020828403121561124657600080fd5b5035919050565b80356001600160a01b038116811461126457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156112a8576112a8611269565b604052919050565b600082601f8301126112c157600080fd5b813567ffffffffffffffff8111156112db576112db611269565b6112ee601f8201601f191660200161127f565b81815284602083860101111561130357600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561133557600080fd5b61133e8461124d565b9250602084013567ffffffffffffffff81111561135a57600080fd5b611366868287016112b0565b925050604084013590509250925092565b6000806040838503121561138a57600080fd5b823567ffffffffffffffff808211156113a257600080fd5b818501915085601f8301126113b657600080fd5b81356020828211156113ca576113ca611269565b8160051b6113d982820161127f565b928352848101820192828101908a8511156113f357600080fd5b958301955b84871015611418576114098761124d565b825295830195908301906113f8565b975050508601359250508082111561142f57600080fd5b5061143c858286016112b0565b9150509250929050565b6000806060838503121561145957600080fd5b604083018481111561146a57600080fd5b8392503567ffffffffffffffff81111561148357600080fd5b61143c858286016112b0565b6000806000606084860312156114a457600080fd5b6114ad8461124d565b92506114bb6020850161124d565b91506114c96040850161124d565b90509250925092565b6000602082840312156114e457600080fd5b610a688261124d565b602081526000610a686020830184611149565b600181811c9082168061151457607f821691505b60208210810361153457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161157857611578611550565b5060010190565b81810381811115610f5c57610f5c611550565b600082516115a4818460208701611125565b9190910192915050565b80820180821115610f5c57610f5c611550565b6000602082840312156115d357600080fd5b81518015158114610a6857600080fd5b6001600160a01b0385811682528416602080830191909152600090604083019085835b600281101561162357815484529282019260019182019101611606565b505060a0608085015260009150845461163b81611500565b8060a087015260c060018084166000811461165d5760018114611677576116a5565b60ff1985168984015283151560051b8901830196506116a5565b896000528560002060005b8581101561169d5781548b8201860152908301908701611682565b8a0184019750505b50949b9a5050505050505050505050565b6000806000606084860312156116cb57600080fd5b8351925060208401519150604084015190509250925092565b601f8211156104e257600081815260208120601f850160051c8101602086101561170b5750805b601f850160051c820191505b8181101561172a57828155600101611717565b505050505050565b815167ffffffffffffffff81111561174c5761174c611269565b6117608161175a8454611500565b846116e4565b602080601f831160018114611795576000841561177d5750858301515b600019600386901b1c1916600185901b17855561172a565b600085815260208120601f198616915b828110156117c4578886015182559484019460019091019084016117a5565b50858210156117e25787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212202521cc0dc3e596490a434c1e5220db32dca1377821c9a3736932759600dd1b4464736f6c63430008140033";

type LedgerManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LedgerManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LedgerManager__factory extends ContractFactory {
  constructor(...args: LedgerManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      LedgerManager & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): LedgerManager__factory {
    return super.connect(runner) as LedgerManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LedgerManagerInterface {
    return new Interface(_abi) as LedgerManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): LedgerManager {
    return new Contract(address, _abi, runner) as unknown as LedgerManager;
  }
}
